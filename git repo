{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal.length</th>\n",
       "      <th>sepal.width</th>\n",
       "      <th>petal.length</th>\n",
       "      <th>petal.width</th>\n",
       "      <th>variety</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal.length  sepal.width  petal.length  petal.width variety\n",
       "0           5.1          3.5           1.4          0.2  Setosa\n",
       "1           4.9          3.0           1.4          0.2  Setosa\n",
       "2           4.7          3.2           1.3          0.2  Setosa\n",
       "3           4.6          3.1           1.5          0.2  Setosa\n",
       "4           5.0          3.6           1.4          0.2  Setosa"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd  \n",
    "import numpy as np  \n",
    "  \n",
    "dataframe1 = pd.read_csv('iris.csv')  \n",
    "dataframe1.head() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataframe1['variety'] = dataframe1['variety'].map({'Setosa': 1, 'Versicolor': 2, 'Virginica': 3}) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = dataframe1.iloc[: , :-1]    \n",
    "b = dataframe1.iloc[: , -1]    \n",
    "# After splitting the data into training and testing data with 30 % of data as test data respectively    \n",
    "\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split  \n",
    "X_train, X_test, y_train, y_test = train_test_split(A, b, test_size=0.3, random_state=0) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction Accuracy:  0.9777777777777777\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier  \n",
    "classifier1 = RandomForestClassifier()  \n",
    "classifier1.fit(X_train, y_train)  \n",
    "  \n",
    "y_pred = classifier1.predict(X_test)  \n",
    "# Accuracy  \n",
    "from sklearn.metrics import accuracy_score  \n",
    "score = accuracy_score(y_test, y_pred)  \n",
    "print(\"Prediction Accuracy: \", score)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle   \n",
    "pickle_out1 = open(\"classifier1.pkl\", \"wb\")    \n",
    "pickle.dump(classifier1, pickle_out1)    \n",
    "pickle_out1.close()    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-07-23 14:30:00.764 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\TAZ78\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2024-07-23 14:30:00.774 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd  \n",
    "import numpy as np  \n",
    "import pickle  \n",
    "import streamlit as st  \n",
    "from PIL import Image  \n",
    "  \n",
    "# Load the trained model  \n",
    "pickle_in1 = open('classifier1.pkl', 'rb')  \n",
    "classifier1 = pickle.load(pickle_in1)  \n",
    "  \n",
    "def prediction1(sepal_length1, sepal_width1, petal_length1, petal_width1):  \n",
    "    prediction = classifier1.predict([[sepal_length1, sepal_width1, petal_length1, petal_width1]])  \n",
    "    return prediction  \n",
    "  \n",
    "def main():  \n",
    "    st.title(\"Iris Flower Prediction\")  \n",
    "  \n",
    "    html_temp = \"\"\"  \n",
    "    <div style=\"background-color: #FFFF00; padding: 16px\">  \n",
    "    <h1 style=\"color: #000000; text-align: center;\">Streamlit Iris Flower Classifier ML App</h1>  \n",
    "    </div>  \n",
    "    \"\"\"  \n",
    "  \n",
    "    st.markdown(html_temp, unsafe_allow_html=True)  \n",
    "  \n",
    "    sepal_length1 = st.text_input(\"Sepal Length\", \"Type Here\")  \n",
    "    sepal_width1 = st.text_input(\"Sepal Width\", \"Type Here\")  \n",
    "    petal_length1 = st.text_input(\"Petal Length\", \"Type Here\")  \n",
    "    petal_width1 = st.text_input(\"Petal Width\", \"Type Here\")  \n",
    "    result = \"\"  \n",
    "  \n",
    "    if st.button(\"Predict\"):  \n",
    "        result = prediction1(sepal_length1, sepal_width1, petal_length1, petal_width1)  \n",
    "    st.write('The output of the above is', result)  \n",
    "  \n",
    "if __name__ == '__main__':  \n",
    "    main()  "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
